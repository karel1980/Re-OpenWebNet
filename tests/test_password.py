# -*- coding: utf-8 -*-

import hashlib
from nose.tools import assert_equal

from reopenwebnet.password import calculate_open_password, hmac_sha1, hmac_sha2, hex_to_wire, wire_to_hex

# Resources:
# - openwebnet hmac reference: https://developer.legrand.com/uploads/2019/12/Hmac.pdf
# We recognise 3 representation formats:
# bytes, hex ('text version' in the openwebnet hmac reference document) and wire ('128 char for sha2 and '80 char' for sha1 in the reference document)

def test_open_password():
    password='123456'
    nonce='9000'
    assert_equal( calculate_open_password(password, nonce), 4294843839 )


def test_hmac_sha1_password():
    # Ra = 20 bytes from server, hexstring
    Ra_hexstring='000102030405060708090a0b0c0d0e0f10111213'
    # Rb = 20 bytes generated by client, hexstring
    Rb_hexstring='0123456789abcdef0123456789abcdef01234567'
    # password (shared secret)
    password='123456'

    ## From the documentation it's unclear whether we should just concatenate Ra,Rb,Kab,A,B or something else
    assert_equal( hmac_sha1(Ra_hexstring, Rb_hexstring, password),  'c32439f9025b79700d37b79c17291d332ca752cf')

def test_hmac_sha1_password():
    # Ra = 20 bytes from server, hexstring
    Ra_hexstring = '000102030405060708090a0b0c0d0e0f10111213'
    # Rb = 20 bytes generated by client, hexstring
    Rb_hexstring='0123456789abcdef0123456789abcdef01234567'
    # password (shared secret)
    password = '123456'

    assert_equal( hmac_sha1(Ra_hexstring, Rb_hexstring, password),  'bb07a7cba20f698a41d93d4c19af29a9425d6113')

def test_hmac_sha2_password():
    # Ra = 20 bytes from server, hexstring
    Ra_hexstring='000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f'

    # Rb = 20 bytes generated by client, hexstring
    Rb_hexstring='0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'

    # password (shared secret)
    password='123456'

    assert_equal( hmac_sha2(Ra_hexstring, Rb_hexstring, password),  '194faa7708d30591e7f4afe46d76d4ffa9f744cd177a247a28ffe695abb2fe31')


def test_hex_to_wire():
    hex = 'af0011a1bf23'

    assert_equal(hex_to_wire(hex), '101500000101100111150203')
    
def test_wire_to_hex():
    wire = '101500000101100111150203'

    assert_equal(wire_to_hex(wire), 'af0011a1bf23')
